const { Transform } = require('stream');
const through2 = require('through2');
const path = require('path');


const groupSvgs = (whole) => {
  const fileSplitToSegments = whole.slice(2);
  return fileSplitToSegments.reduce((acu, segment, segmentIndex, array) => {
    let { next } = acu;
    const { whole } = acu;

    let segmentSections;
    if (segment.substr(0, 4) === '<svg') {
      segmentSections = segment.split(' ');
      segmentSections = segmentSections
        .map((section) => {
          if (section.substr(0, 4) === 'id="') {
            next.id = section.split('"')[1];
            next.id = next.id.charAt(0).toUpperCase() + next.id.slice(1);
          }
          if (section.substr(0, 5) === 'xmlns') {
            section = '>'
          }
          if (section.substr(0, 3) !== 'y="'
            && section.substr(0, 3) !== 'x="'
            && section.substr(0, 4) !== 'id="'
            && section.substr(0, 5) !== 'xmlns') {
            return section
          }
        });
      segmentSections.splice(1, 0, `className={\`Icon-${next.id} \${props.class}\`} onClick={props.click}`)
      segmentSections = segmentSections.join(' ');
    } else if (segment.substr(0, 2) !== '</') {
      segmentSections = segment.split(' ');
      segmentSections.splice(1, 0, `className={\`Icon-${next.id}-style \${props.class}-style\`}`);
      segmentSections = segmentSections.join(' ');
    }

    next.array.push(segmentSections || segment);
    if (segment.substr(0, 5) === '</svg') {
      const svg = acu.next.array.join('');
      const { id } = acu.next;
      whole.push({ svg, id });
      next = { array: [], id: null };
    }
    if (segmentIndex === array.length - 1) {
      whole.splice(whole.length - 1, 1)
      return whole;
    } else {
      return { whole, next };
    }
  }, { whole: [], next: { array: [], id: null } });
}

const processFileContent = (file) => {
  const fileSplitToChars = file._contents.toString().split('');
  const fileJoinedAndGrouped = fileSplitToChars.reduce((acu, currentChar, index, array) => {
    let { next } = acu;
    const { whole } = acu;

    next.push(currentChar);

    if (currentChar === '>') {
      whole.push(acu.next.join(''));
      next = [];
    }

    if (index === array.length - 1) {
      return groupSvgs(whole)
    }
    return { whole, next };
  }, { whole: [], next: [] });
  return fileJoinedAndGrouped.map((group) => {
    const component = `(${group.svg})`
    return { ...group, component }
  })
};

module.exports = () => {
  return through2.obj(function (file, enc, cb) {
    const componentStringGroups = processFileContent(file);
    const f = path.parse(file.path);
    const stream = this
    const initString = `/**
    *  Generated by the gulp-sprite-component-ejs plugin
    */
    import React from 'react';
    const Icon = props => {
      const display = {\n`
    const index = componentStringGroups.reduce((acu, group) => {
      return acu + `${group.id}: ${group.component},` + '\n'
    }, initString);
    newFile = file.clone();
    newFile.contents = new Buffer(index + `};
    
    return display[props.display]}
    export default Icon`);
    newFile.path = path.join(f.dir, 'Icon.js');
    stream.push(newFile);
    cb();
  });
};

/**
 * const 
 * <Icon display={Roam} class click={to}/>
 */